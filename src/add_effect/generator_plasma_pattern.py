
import os
import glob

import numpy as np
import math
import random

import cv2
import PIL.Image

# Reference:
# https://github.com/tisnik/fractals/blob/master/textures/plasma.py


####################################################################################################
# --------------------------------------------------------------------------------------------------
# palette (ice)
# --------------------------------------------------------------------------------------------------

palette = (
    (000, 000, 0),
    (000, 000, 0),
    (000, 000, 8),
    (000, 000, 16),
    (000, 000, 24),
    (000, 000, 32),
    (000, 000, 40),
    (000, 000, 48),
    (000, 000, 56),
    (000, 000, 64),
    (000, 000, 72),
    (000, 000, 80),
    (000, 000, 88),
    (000, 000, 96),
    (000, 000, 104),
    (000, 000, 112),
    (000, 000, 120),
    (000, 000, 128),
    (000, 000, 136),
    (000, 000, 144),
    (000, 000, 152),
    (000, 000, 160),
    (000, 000, 168),
    (000, 000, 176),
    (000, 000, 184),
    (000, 000, 192),
    (000, 000, 200),
    (000, 000, 208),
    (000, 000, 216),
    (000, 000, 224),
    (000, 000, 232),
    (000, 000, 240),
    (000, 000, 252),
    (000, 4, 252),
    (000, 12, 252),
    (000, 20, 252),
    (000, 28, 252),
    (000, 36, 252),
    (000, 44, 252),
    (000, 52, 252),
    (000, 60, 252),
    (000, 68, 252),
    (000, 76, 252),
    (000, 84, 252),
    (000, 92, 252),
    (000, 100, 252),
    (000, 108, 252),
    (000, 116, 252),
    (000, 124, 252),
    (000, 132, 252),
    (000, 140, 252),
    (000, 148, 252),
    (000, 156, 252),
    (000, 164, 252),
    (000, 172, 252),
    (000, 180, 252),
    (000, 188, 252),
    (000, 196, 252),
    (000, 204, 252),
    (000, 212, 252),
    (000, 220, 252),
    (000, 228, 252),
    (000, 236, 252),
    (000, 244, 252),
    (000, 252, 252),
    (000, 252, 252),
    (000, 248, 252),
    (000, 244, 252),
    (000, 240, 252),
    (000, 236, 252),
    (000, 232, 252),
    (000, 228, 252),
    (000, 224, 252),
    (000, 220, 252),
    (000, 216, 252),
    (000, 212, 252),
    (000, 208, 252),
    (000, 204, 252),
    (000, 200, 252),
    (000, 196, 252),
    (000, 192, 252),
    (000, 188, 252),
    (000, 184, 252),
    (000, 180, 252),
    (000, 176, 252),
    (000, 172, 252),
    (000, 168, 252),
    (000, 164, 252),
    (000, 160, 252),
    (000, 156, 252),
    (000, 152, 252),
    (000, 148, 252),
    (000, 144, 252),
    (000, 140, 252),
    (000, 136, 252),
    (000, 132, 252),
    (000, 128, 252),
    (000, 124, 252),
    (000, 120, 252),
    (000, 116, 252),
    (000, 112, 252),
    (000, 108, 252),
    (000, 104, 252),
    (000, 100, 252),
    (000, 96, 252),
    (000, 92, 252),
    (000, 88, 252),
    (000, 84, 252),
    (000, 80, 252),
    (000, 76, 252),
    (000, 72, 252),
    (000, 68, 252),
    (000, 64, 252),
    (000, 60, 252),
    (000, 56, 252),
    (000, 52, 252),
    (000, 48, 252),
    (000, 44, 252),
    (000, 40, 252),
    (000, 36, 252),
    (000, 32, 252),
    (000, 28, 252),
    (000, 24, 252),
    (000, 20, 252),
    (000, 16, 252),
    (000, 12, 252),
    (000, 8, 252),
    (000, 4, 252),
    (000, 000, 252),
    (000, 000, 252),
    (000, 12, 252),
    (000, 28, 252),
    (000, 44, 252),
    (000, 60, 252),
    (000, 76, 252),
    (000, 92, 252),
    (000, 108, 252),
    (000, 124, 252),
    (000, 140, 252),
    (000, 156, 252),
    (000, 172, 252),
    (000, 188, 252),
    (000, 204, 252),
    (000, 220, 252),
    (000, 236, 252),
    (000, 232, 252),
    (4, 228, 252),
    (4, 224, 252),
    (8, 220, 252),
    (12, 212, 252),
    (12, 208, 252),
    (16, 204, 252),
    (20, 200, 252),
    (20, 192, 252),
    (24, 188, 252),
    (28, 184, 252),
    (28, 180, 252),
    (32, 176, 252),
    (36, 168, 252),
    (36, 164, 252),
    (40, 160, 252),
    (44, 156, 252),
    (44, 148, 252),
    (48, 144, 252),
    (52, 140, 252),
    (52, 136, 252),
    (56, 128, 252),
    (60, 124, 252),
    (60, 120, 252),
    (64, 116, 252),
    (68, 112, 252),
    (68, 104, 252),
    (72, 100, 252),
    (76, 96, 252),
    (76, 92, 252),
    (80, 84, 252),
    (84, 80, 252),
    (84, 76, 252),
    (88, 72, 252),
    (92, 64, 252),
    (92, 60, 252),
    (96, 56, 252),
    (100, 52, 252),
    (100, 48, 252),
    (104, 40, 252),
    (108, 36, 252),
    (108, 32, 252),
    (112, 28, 252),
    (116, 20, 252),
    (116, 16, 252),
    (120, 12, 252),
    (124, 8, 252),
    (128, 000, 252),
    (128, 000, 252),
    (124, 000, 248),
    (124, 000, 244),
    (120, 000, 240),
    (120, 000, 236),
    (116, 000, 232),
    (116, 000, 228),
    (112, 000, 224),
    (112, 000, 220),
    (108, 000, 216),
    (108, 000, 212),
    (104, 000, 208),
    (104, 000, 204),
    (100, 000, 200),
    (100, 000, 196),
    (96, 000, 192),
    (96, 000, 188),
    (92, 000, 184),
    (92, 000, 180),
    (88, 000, 176),
    (88, 000, 172),
    (84, 000, 168),
    (84, 000, 164),
    (80, 000, 160),
    (80, 000, 156),
    (76, 000, 152),
    (76, 000, 148),
    (72, 000, 144),
    (72, 000, 140),
    (68, 000, 136),
    (68, 000, 132),
    (64, 000, 128),
    (64, 000, 124),
    (60, 000, 120),
    (60, 000, 116),
    (56, 000, 112),
    (56, 000, 108),
    (52, 000, 104),
    (52, 000, 100),
    (48, 000, 96),
    (48, 000, 92),
    (44, 000, 88),
    (44, 000, 84),
    (40, 000, 80),
    (40, 000, 76),
    (36, 000, 72),
    (36, 000, 68),
    (32, 000, 64),
    (32, 000, 60),
    (28, 000, 56),
    (28, 000, 52),
    (24, 000, 48),
    (24, 000, 44),
    (20, 000, 40),
    (20, 000, 36),
    (16, 000, 32),
    (16, 000, 28),
    (12, 000, 24),
    (12, 000, 20),
    (8, 000, 16),
    (8, 000, 12),
    (4, 000, 8),
    (4, 000, 4),
)

# palette_black_and_white = (
#     ((0, 0, 0),) * 32 + ((128, 128, 128),) * 32 + ((255, 255, 255),) * 32 +  
#     ((0, 0, 0),) * 32 + ((128, 128, 128),) * 32 + ((255, 255, 255),) * 32 + 
#     ((0, 0, 0),) * 32 + ((128, 128, 128),) * 32,)[0]


palette_black_and_white = (
    ((0, 0, 0),) * 32 + ((255, 255, 255),) * 32 +  
    ((0, 0, 0),) * 32 + ((255, 255, 255),) * 32 + 
    ((0, 0, 0),) * 32 + ((255, 255, 255),) * 32 +  
    ((0, 0, 0),) * 32 + ((255, 255, 255),) * 32
    )



# --------------------------------------------------------------------------------------------------
# generate plasma pattern
# --------------------------------------------------------------------------------------------------

def random_gauss():
    N = 50
    sum = 0.0
    for i in range(N):
        sum += random.random()
    return sum / N


def compute_min_max(bitmap, width, height):
    """Minimum and maximum pixel value computation."""
    min = float("inf")
    max = float("-inf")
    for j in range(height):
        for i in range(width):
            z = bitmap[j][i]
            if max < z:
                max = z
            if min > z:
                min = z
    return min, max


def convert_to_image(bitmap, image, width, height, palette):
    """Convert the 2D array into a proper bitmap with high contrast."""
    min, max = compute_min_max(bitmap, width, height)
    k = 255.0 / (max - min)
    for y in range(height):
        for x in range(width):
            f = float(bitmap[y][x])
            f -= min
            f *= k
            i = int(f) & 255
            color = (palette[i][0], palette[i][1], palette[i][2])
            # image.putpixel((x, y), color)
            image[y, x, :] = color
    return image


def spectral_synthesis(image, palette, n, h):
    """Plasma texture computation using spectral synthesis."""
    # width, height = image.size
    width, height = image.shape[:2]
    bitmap = np.zeros([height, width])
    A = np.empty([n // 2, n // 2])
    B = np.empty([n // 2, n // 2])
    beta = 2.0 * h + 1
    for j in range(n // 2):
        for i in range(n // 2):
            rad_i = pow((i + 1), -beta / 2.0) * random_gauss()
            rad_j = pow((j + 1), -beta / 2.0) * random_gauss()
            phase_i = 2.0 * math.pi * random.random()
            phase_j = 2.0 * math.pi * random.random()
            A[j][i] = rad_i * math.cos(phase_i) * rad_j * math.cos(phase_j)
            B[j][i] = rad_i * math.sin(phase_i) * rad_j * math.sin(phase_j)
    for j in range(height):
        for i in range(width):
            z = 0
            for k in range(n // 2):
                for l in range(n // 2):
                    u = (i - n / 2) * 2.0 * math.pi / width
                    v = (j - n / 2) * 2.0 * math.pi / height
                    z += A[k][l] * math.cos(k * u + l * v) + B[k][l] * math.sin(
                        k * u + l * v
                    )
            bitmap[j][i] = z
    image_with_texture = convert_to_image(bitmap, image, width, height, palette)
    return image_with_texture


# ------------
IMAGE_WIDTH = 256
IMAGE_HEIGHT = 256

image = np.zeros((IMAGE_WIDTH, IMAGE_HEIGHT, 3), np.uint8)
image[:] = (255, 255, 255)

image_with_texture = spectral_synthesis(image, palette_black_and_white , n=15, h=0.8)
# image_with_texture = spectral_synthesis(image, palette_black_and_white , n=15*3, h=0.8/4)

PIL.Image.fromarray(image_with_texture).show()


x# ------------
# palette ice

# IMAGE_WIDTH = 256
# IMAGE_HEIGHT = 256
# image = np.array(PIL.Image.new("RGB", (IMAGE_WIDTH, IMAGE_HEIGHT)))
# image_with_texture = spectral_synthesis(image, palette , n=15, h=0.8)
# PIL.Image.fromarray(image_with_texture).show()

